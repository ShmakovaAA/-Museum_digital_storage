import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";

const Activity = () => {
    const { id } = useParams(); // –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ URL
    const [activityData, setActivityData] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    const [previewPhoto, setPreviewPhoto] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
    const [loading, setLoading] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const [error, setError] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    const navigate = useNavigate(); // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ
    const [activeImage, setActiveImage] = useState(null);
    const [activeVideo, setActiveVideo] = useState(null);
    const [videoPreviews, setVideoPreviews] = useState({}); // –•—Ä–∞–Ω–∏–º –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    useEffect(() => {
        const fetchActivityDetails = async () => {
            try {
                const response = await fetch(`http://127.0.0.1:8000/api/activity/${id}/`);
                if (!response.ok) {
                    throw new Error("Failed to fetch activity details");
                }
                const data = await response.json();
                setActivityData(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                document.title = "–õ–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ - –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"

                // –ï—Å–ª–∏ –µ—Å—Ç—å preview_photo, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
                if (data.preview_photo) {
                    const mediaResponse = await fetch(
                        `http://127.0.0.1:8000/api/mediafile/${data.preview_photo}/`
                    );
                    if (mediaResponse.ok) {
                        const mediaData = await mediaResponse.json();
                        if (mediaData.mediafile_type === "photo" && mediaData.file_path) {
                            setPreviewPhoto(mediaData.file_path);
                        }
                    }
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ mediafiles)
                if (data.mediafiles && data.mediafiles.length > 0) {
                    const firstImage = data.mediafiles.find((media) => media.mediafile_type === "photo");
                    setActiveImage(firstImage || null);

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –≤ mediafiles)
                    const firstVideo = data.mediafiles.find((media) => media.mediafile_type === "video");
                    setActiveVideo(firstVideo || null);

                    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ
                    generateVideoPreviews(data.mediafiles.filter((media) => media.mediafile_type === "video"));
                }

                setLoading(false); // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            } catch (error) {
                console.error("Error fetching activity details:", error);
                setError("Failed to load activity details.");
                setLoading(false); // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π
            }
        };

        fetchActivityDetails();
    }, [id]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const handlePrevImage = () => {
        if (!activityData || !activityData.mediafiles) return;
        const photos = activityData.mediafiles.filter((media) => media.mediafile_type === "photo");
        const currentIndex = photos.findIndex(
            (mediafile) => mediafile.mediafile_id === activeImage.mediafile_id
        );
        const prevIndex = (currentIndex - 1 + photos.length) % photos.length;
        setActiveImage(photos[prevIndex]);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const handleNextImage = () => {
        if (!activityData || !activityData.mediafiles) return;
        const photos = activityData.mediafiles.filter((media) => media.mediafile_type === "photo");
        const currentIndex = photos.findIndex(
            (mediafile) => mediafile.mediafile_id === activeImage.mediafile_id
        );
        const nextIndex = (currentIndex + 1) % photos.length;
        setActiveImage(photos[nextIndex]);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ
    const handlePrevVideo = () => {
        if (!activityData || !activityData.mediafiles) return;
        const videos = activityData.mediafiles.filter((media) => media.mediafile_type === "video");
        const currentIndex = videos.findIndex(
            (mediafile) => mediafile.mediafile_id === activeVideo.mediafile_id
        );
        const prevIndex = (currentIndex - 1 + videos.length) % videos.length;
        setActiveVideo(videos[prevIndex]);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
    const handleNextVideo = () => {
        if (!activityData || !activityData.mediafiles) return;
        const videos = activityData.mediafiles.filter((media) => media.mediafile_type === "video");
        const currentIndex = videos.findIndex(
            (mediafile) => mediafile.mediafile_id === activeVideo.mediafile_id
        );
        const nextIndex = (currentIndex + 1) % videos.length;
        setActiveVideo(videos[nextIndex]);
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ
    const generateVideoPreviews = async (videos) => {
        const previews = {};
        for (const video of videos) {
            const previewUrl = await captureVideoFrame(video.file_path);
            previews[video.mediafile_id] = previewUrl;
        }
        setVideoPreviews(previews);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ
    const captureVideoFrame = (videoUrl) => {
        return new Promise((resolve) => {
            const video = document.createElement("video");
            const canvas = document.createElement("canvas");
            video.src = videoUrl;
            video.crossOrigin = "anonymous"; // –î–ª—è CORS
            video.muted = true;
            video.preload = "auto";
            video.onloadedmetadata = () => {
                video.currentTime = 1; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
            };
            video.onseeked = () => {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                const ctx = canvas.getContext("2d");
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                const previewUrl = canvas.toDataURL("image/jpeg");
                resolve(previewUrl);
            };
        });
    };

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    if (loading) {
        return (
            <div className="loading-spinner-container">
                <div className="loading-spinner"></div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    if (error) {
        return (
            <div className="error">
                <p>{error}</p>
                <button onClick={() => navigate(-1)}>–ù–∞–∑–∞–¥</button>
            </div>
        );
    }

    return (
        <div className="event-details-container">
            {/* –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫: —Ñ–æ—Ç–æ + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ */}
            <div className="header-block-container">
                {/* –ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ */}
                {previewPhoto && (
                    <div className="photo-container">
                        <img src={previewPhoto} alt="Activity Preview" />
                    </div>
                )}
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ */}
                <div className="event-info-container">
                    <h1 className="event-title">{activityData.title}</h1>
                    <div className="event-meta">
                        {/* –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
                        {activityData.event_type_display && (
                            <p className="event-type">
                                <span className="event-type-badge">{activityData.event_type_display.toUpperCase()}</span>
                            </p>
                        )}
                        {/* –î–∞—Ç—ã */}
                        <p className="event-date">
                        üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{activityData.start_date}</b>
                            {activityData.end_date && ` | –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${activityData.end_date}`}
                        </p>
                        {/* –õ–æ–∫–∞—Ü–∏—è */}
                        <p className="event-location">üåç –õ–æ–∫–∞—Ü–∏—è: <b>{activityData.location}</b></p>
                    </div>
                </div>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
            <div className="block-container">
                <p className="event-description">{activityData.description}</p>
            </div>

            {/* –ü—Ä–µ–¥–º–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–æ–∫) */}
            {activityData.event_type === "exhibition" && activityData.items && (
                <div className="block-container items-block">
                    <h3>üìö –ü—Ä–µ–¥–º–µ—Ç—ã:</h3>
                    {activityData.items.length > 0 ? (
                        <ul>
                            {activityData.items.map((item) => (
                                <li key={item.id} className="item-item">
                                    {/* –≠–º–æ–¥–∑–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
                                    <span className="item-name">{item.name}</span>
                                    {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
                                    <p className="item-description">{item.description}</p>
                                </li>
                            ))}
                        </ul>
                    ) : (
                        <p>No items available.</p>
                    )}
                </div>
            )}

            {/* –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è */}
            <div className="block-container related-events">
                <h3>üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</h3>
                {activityData.related_activities && activityData.related_activities.length > 0 ? (
                    <ul>
                        {activityData.related_activities.map((event) => (
                            <li
                                key={event.id}
                                className="related-event-item"
                                onClick={() => navigate(`/event/${event.id}`)} // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–±—ã—Ç–∏—è
                            >
                                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ */}
                                <span className="event-info">
                                    {event.title} ({event.start_date}
                                    {event.end_date && ` - ${event.end_date}`})
                                </span>
                                {/* –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º */}
                                <div className="event-tooltip">{event.description}</div>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p>No related events.</p>
                )}
            </div>
            
            {/* –°—Å—ã–ª–∫–∏ */}
            <div className="block-container links">
                <h3>üîó –°—Å—ã–ª–∫–∏:</h3>
                {activityData.links.length > 0 ? (
                    <ul>
                        {activityData.links.map((link, index) => (
                            <li key={index} className="link-item">
                                <a href={link} target="_blank" rel="noopener noreferrer">
                                    {link}
                                </a>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p>No links available.</p>
                )}
            </div>

            {/* –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
            {activityData.mediafiles && activityData.mediafiles.some((media) => media.mediafile_type === "photo") && (
                <div className="block-container gallery-block">
                    <h3>–ì–∞–ª–µ—Ä–µ—è</h3>
                    <div className="gallery-container">
                        {/* –ë–æ–ª—å—à–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è */}
                        <div className="image-navigation">
                            <button className="gallery-arrow left-arrow" onClick={handlePrevImage}>
                                ‚Üê
                            </button>
                            <img
                                src={activeImage?.file_path}
                                alt="Active Gallery Image"
                                className="active-image"
                            />
                            <button className="gallery-arrow right-arrow" onClick={handleNextImage}>
                                ‚Üí
                            </button>
                        </div>
                        {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
                        <div className="thumbnails-container">
                            {activityData.mediafiles
                                .filter((media) => media.mediafile_type === "photo")
                                .map((mediafile, index) => (
                                    <img
                                        key={mediafile.mediafile_id}
                                        src={mediafile.file_path}
                                        alt={`Thumbnail ${index}`}
                                        className={`thumbnail ${
                                            activeImage?.mediafile_id === mediafile.mediafile_id
                                                ? "active-thumbnail"
                                                : ""
                                        }`}
                                        onClick={() => setActiveImage(mediafile)}
                                    />
                                ))}
                        </div>
                    </div>
                </div>
            )}

            {/* –í–∏–¥–µ–æ –±–ª–æ–∫ */}
            {activityData.mediafiles && activityData.mediafiles.some((media) => media.mediafile_type === "video") && (
                <div className="block-container video-block">
                    <h3>–í–∏–¥–µ–æ–ø–ª–µ–µ—Ä</h3>
                    <div className="video-container">
                        {/* –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è */}
                        <div className="video-navigation">
                            <button className="video-arrow left-arrow" onClick={handlePrevVideo}>
                                ‚Üê
                            </button>
                            <video src={activeVideo?.file_path} controls className="active-video" />
                            <button className="video-arrow right-arrow" onClick={handleNextVideo}>
                                ‚Üí
                            </button>
                        </div>
                        {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã –≤–∏–¥–µ–æ */}
                        <div className="thumbnails-container">
                            {activityData.mediafiles
                                .filter((media) => media.mediafile_type === "video")
                                .map((mediafile, index) => (
                                    <img
                                        key={mediafile.mediafile_id}
                                        src={videoPreviews[mediafile.mediafile_id] || ""}
                                        alt={`Video Thumbnail ${index}`}
                                        className={`thumbnail ${
                                            activeVideo?.mediafile_id === mediafile.mediafile_id
                                                ? "active-thumbnail"
                                                : ""
                                        }`}
                                        onClick={() => setActiveVideo(mediafile)}
                                    />
                                ))}
                        </div>
                    </div>
                </div>
            )}

            {/* –ë–ª–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
            {activityData.mediafiles && activityData.mediafiles.some((media) => media.mediafile_type === "document") && (
                <div className="block-container documents-block">
                    <h3>–î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                    <div className="documents-container">
                        {activityData.mediafiles
                            .filter((media) => media.mediafile_type === "document")
                            .map((document, index) => (
                                <div key={document.mediafile_id} className="document-item">
                                    {/* –ò–∫–æ–Ω–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
                                    <span className="document-icon">üìã</span>
                                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
                                    <span className="document-name">
                                        {document.file_name || document.file_path.split("/").pop()}
                                    </span>
                                    {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å */}
                                    <button
                                        className="download-button"
                                        onClick={() => window.open(document.file_path, "_blank")}
                                    >
                                        –°–∫–∞—á–∞—Ç—å
                                    </button>
                                </div>
                            ))}
                    </div>
                </div>
            )}
            

            {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
            <div className="back-button-container">
                <button className="back-button" onClick={() => navigate(-1)}>
                    –ù–∞–∑–∞–¥
                </button>
            </div>
        </div>
    );
};

export default Activity;